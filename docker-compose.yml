services:
  postgres:
    image: postgres:17.2
    restart: always
    ports:
      - "127.0.0.1:${POSTGRES_PORT:-5432}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 10

  pgadmin:
    image: dpage/pgadmin4:8.14
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "127.0.0.1:${PGADMIN_PORT:-5050}:80"
    networks:
      - frontend
      - backend
    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--spider", "localhost:80" ]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7.4.1
    restart: always
    command: [ "redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD}" ]
    ports:
      - "127.0.0.1:${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 10

  nextcloud:
    hostname: ${NEXTCLOUD_HOSTNAME:-localhost}
    image: nextcloud:30.0.4
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      OVERWRITEPROTOCOL: ${NEXTCLOUD_OVERWRITEPROTOCOL:-https}
      NEXTCLOUD_TRUSTED_DOMAINS: ${NEXTCLOUD_TRUSTED_DOMAINS:-localhost}
      NEXTCLOUD_ADMIN_USER: ${NEXTCLOUD_ADMIN_USER}
      NEXTCLOUD_ADMIN_PASSWORD: ${NEXTCLOUD_ADMIN_PASSWORD}
      POSTGRES_HOST: postgres:5432
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      REDIS_HOST: redis
      REDIS_HOST_PORT: 6379
      REDIS_HOST_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - nextcloud_data:/var/www/html
      - ./nextcloud/wait-for-it.sh:/usr/local/bin/wait-for-it.sh
      - ./nextcloud/hooks:/docker-entrypoint-hooks.d
    ports:
      - "127.0.0.1:${NEXTCLOUD_PORT:-8080}:80"
    networks:
      - frontend
      - backend
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:80" ]
      interval: 5s
      timeout: 5s
      retries: 10

  nginx:
    image: nginx:1.27.3
    restart: always
    depends_on:
      nextcloud:
        condition: service_healthy
      pgadmin:
        condition: service_healthy
    volumes:
      - nginx_logs:/var/log/nginx
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/templates:/etc/nginx/templates:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_PORT_SSL:-443}:443"
    environment:
      NEXTCLOUD_PROXY_HOST: nextcloud
      NEXTCLOUD_PROXY_PORT: 80
      PGADMIN_PROXY_HOST: pgadmin
      PGADMIN_PROXY_PORT: 80
    networks:
      - frontend
      - backend

  backup:
    image: ghcr.io/borgmatic-collective/borgmatic:1.9.4
    restart: always
    volumes:
      - postgres_data:/mnt/source/postgres:ro
      - redis_data:/mnt/source/redis:ro
      - nextcloud_data:/mnt/source/nextcloud:ro
      - nginx_logs:/mnt/source/nginx:ro
      - cron_logs:/mnt/source/cron:ro
      - ./backup/borgmatic.d:/etc/borgmatic.d
      - ./backup/.config/borg:/root/.config/borg
      - ./backup/.ssh:/root/.ssh
      - ./backup/.cache/borg:/root/.cache/borg
      - ./backup/.state/borgmatic:/root/.local/state/borgmatic
    environment:
      BORG_HEALTHCHECK_URL: ${BORGMATIC_BORG_HEALTHCHECK_URL}
      TZ: ${BORGMATIC_TZ}
      BORG_RSH: "ssh -i /root/.ssh/id_ed25519 -o StrictHostKeyChecking=no"
      BORG_PASSPHRASE: ${BORGMATIC_BORG_PASSPHRASE}
      BORG_REPO: ${BORGMATIC_BORG_REPO}

  cron:
    build:
      context: cron
      dockerfile: Dockerfile
    restart: always
    depends_on:
      nextcloud:
        condition: service_healthy
      backup:
        condition: service_healthy
    volumes:
      - nextcloud_data:/var/www/html
      - cron_logs:/var/log
    networks:
      - backend

volumes:
  postgres_data:
  pgadmin_data:
  redis_data:
  nextcloud_data:
  cron_logs:
  nginx_logs:

networks:
  frontend:
  backend:
