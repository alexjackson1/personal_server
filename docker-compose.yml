services:
  postgres:
    image: postgres:17.2
    container_name: ${COMPOSE_PROJECT_NAME}_postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.4.1
    container_name: ${COMPOSE_PROJECT_NAME}_redis
    restart: always
    command: [ "redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD}" ]
    ports:
      - "127.0.0.1:${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:8.14
    container_name: ${COMPOSE_PROJECT_NAME}_pgadmin
    restart: always
    depends_on:
      postgres:
        condition: service_healthy

    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "127.0.0.1:${PGADMIN_PORT:-5050}:80"
    networks:
      - frontend

  nextcloud:
    hostname: ${NEXTCLOUD_HOSTNAME:-localhost}
    image: nextcloud:30.0.4
    container_name: ${COMPOSE_PROJECT_NAME}_nextcloud
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      OVERWRITEPROTOCOL: ${NEXTCLOUD_OVERWRITEPROTOCOL:-https}
      NEXTCLOUD_TRUSTED_DOMAINS: ${NEXTCLOUD_TRUSTED_DOMAINS:-localhost}
      NEXTCLOUD_ADMIN_USER: ${NEXTCLOUD_ADMIN_USER}
      NEXTCLOUD_ADMIN_PASSWORD: ${NEXTCLOUD_ADMIN_PASSWORD}
      POSTGRES_HOST: postgres:5432
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      REDIS_HOST: redis
      REDIS_HOST_PORT: 6379
      REDIS_HOST_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - nextcloud_data:/var/www/html
    ports:
      - "127.0.0.1:${NEXTCLOUD_PORT:-8080}:80"
    networks:
      - frontend

  cron:
    build:
      context: cron
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}_cron
    restart: always
    depends_on:
      - nextcloud
    volumes:
      - nextcloud_data:/var/www/html
      - cron_logs:/var/log
    networks:
      - backend

  nginx:
    image: nginx:1.27.3
    container_name: ${COMPOSE_PROJECT_NAME}_nginx
    restart: always
    depends_on:
      - nextcloud
      - pgadmin
    volumes:
      - nginx_logs:/var/log/nginx
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/templates:/etc/nginx/templates:ro
      - /etc/letsencrypt/live/admin.alexjackson.cloud/:/etc/letsencrypt/live/admin.alexjackson.cloud/:ro
      - /etc/letsencrypt/live/alexjackson.cloud/:/etc/letsencrypt/live/alexjackson.cloud/:ro
      - /etc/letsencrypt/ssl-dhparams.pem:/etc/letsencrypt/ssl-dhparams.pem:ro
      - /etc/letsencrypt/options-ssl-nginx.conf:/etc/letsencrypt/options-ssl-nginx.conf:ro
    ports:
      - "127.0.0.1:${NGINX_PORT:-80}:80"
      - "127.0.0.1:${NGINX_PORT_SSL:-443}:443"
    networks:
      - frontend
      - backend
    environment:
      NEXTCLOUD_HOST: nextcloud
      NEXTCLOUD_PORT: 80
      PGADMIN_HOST: pgadmin
      PGADMIN_PORT: 80

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:
  nextcloud_data:
  cron_logs:
  nginx_logs:


networks:
  frontend:
  backend:
